from aiogram import Bot, Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from core import messages
from data.manager import DataManager
from states.purchases import AddPurchase

router = Router()


def setup_handlers(data_manager: DataManager) -> Router:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π DataManager."""

    @router.message(Command("start"))
    async def cmd_start(msg: Message, bot: Bot) -> None:
        first_name: str = msg.from_user.first_name
        last_name: str = msg.from_user.last_name
        await msg.answer(
            messages.WELCOME.format(
                name=first_name or last_name or '–ü—Ä–∏—à–µ–ª–µ—Ü'
            )
        )

    @router.message(Command("help"))
    async def cmd_help(msg: Message, bot: Bot) -> None:
        await msg.answer(messages.HELP)

    @router.message(StateFilter(None), Command("add"))
    async def cmd_add(msg: Message, state: FSMContext) -> None:
        await msg.reply("üí≤ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC)")
        await state.set_state(AddPurchase.asset)

    @router.message(AddPurchase.asset)
    async def process_asset(msg: Message, state: FSMContext) -> None:
        await state.update_data(asset=msg.text.strip().lower())
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏")

        await state.set_state(AddPurchase.price)

    @router.message(AddPurchase.price)
    async def process_price(msg: Message, state: FSMContext) -> None:
        try:
            price = float(msg.text.strip())
            if price <= 0:
                raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        except ValueError:
            await msg.reply(
                "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
            )
        else:
            await state.update_data(price=price)
            await msg.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2.5)")
            await state.set_state(AddPurchase.amount)

    @router.message(AddPurchase.amount)
    async def process_amount(msg: Message, state: FSMContext) -> None:
        try:
            amount = float(msg.text.strip())
            if amount <= 0:
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
            await state.update_data(amount=amount)
            data = await state.get_data()
            output = messages.PURCHASE_INPUT_DATA.format(
                asset=data['asset'],
                price=data['price'],
                amount=data['amount'],
            )

            await msg.answer(
                f"üèÅ –í—Å–µ –≤–µ—Ä–Ω–æ?\n{output}\n\n–í–≤–µ–¥–∏—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            )
            await state.set_state(AddPurchase.confirm)
        except ValueError:
            await msg.reply(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
            )

    @router.message(AddPurchase.confirm)
    async def process_confirm(msg: Message, state: FSMContext) -> None:
        if msg.text.strip().lower() != "–¥–∞":
            await msg.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            await state.clear()
            return

        data = await state.get_data()
        user_id = msg.from_user.id
        asset = data["asset"]
        price = data["price"]
        amount = data["amount"]

        data_manager.add_purchase(user_id, asset, price, amount)
        avg_price, total_amount, total_cost = data_manager.get_stats(
            user_id, asset
        )

        await msg.answer(
            messages.ADDED_PURCHASE_INFO.format(
                asset=asset,
                price=price,
                amount=amount,
                avg_price=avg_price,
                total_amount=total_amount,
                total_cost=total_cost,
            )
        )
        await state.clear()

    @router.message(Command("view"))
    async def cmd_view(msg: Message) -> None:
        user_id = msg.from_user.id
        assets = data_manager.get_user_assets(user_id)
        if not assets:
            await msg.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫")
            return

        for asset in assets:
            avg_price, total_amount, total_cost = data_manager.get_stats(
                user_id, asset
            )
            await msg.reply(
                messages.AVG_PRICE_INFO.format(
                    asset=asset,
                    avg_price=avg_price,
                    total_amount=total_amount,
                    total_cost=total_cost,
                )
            )

    @router.message(Command("clear"))
    async def cmd_clear(msg: Message) -> None:
        user_id = msg.from_user.id
        assets = data_manager.get_user_assets(user_id)

        if not assets:
            await msg.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
            return

        data_manager.clear(user_id)
        await msg.reply("–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∫–∞—Ö –æ—á–∏—â–µ–Ω—ã")

    return router
